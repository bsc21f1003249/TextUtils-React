{"version":3,"sources":["components/Alert.js","components/Navbar.js","components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Alert","props","alert","React","createElement","className","concat","type","role","word","lower","toLowerCase","charAt","toUpperCase","slice","capitalize","msg","data-bs-dismiss","aria-label","Navbar","mode","href","title","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","id","onClick","toggleMode","htmlFor","TextForm","_useState","useState","_useState2","_slicedToArray","text","setText","Fragment","heading","rows","value","onChange","event","target","style","backgroundColor","newText","showAlert","copyText","document","getElementById","select","navigator","clipboard","writeText","replace","trim","split","length","defaultProps","aboutText","App","setMode","_useState3","_useState4","setAlert","message","setTimeout","body","onShowAlert","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode"],"mappings":"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","file":"static/js/main.15f5e4fd.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\nfunction Alert(props) {\r\n  const capitalize = (word) =>{\r\n    const lower=word.toLowerCase();\r\n    return lower.charAt(0).toUpperCase()+lower.slice(1)\r\n  }\r\n  return (\r\n    props.alert &&  <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n      <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\r\n      <button\r\n        type=\"button\"\r\n        className=\"btn-close\"\r\n        data-bs-dismiss=\"alert\"\r\n        aria-label=\"Close\"\r\n      >\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Alert;\r\n","import React, { useState } from \"react\";\r\n\r\nimport { NavLink } from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav\r\n      className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}\r\n    >\r\n      <div className=\"container-fluid\">\r\n        <a className=\"navbar-brand\" href=\"/\">\r\n          {props.title}\r\n        </a>\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-bs-toggle=\"collapse\"\r\n          data-bs-target=\"#navbarSupportedContent\"\r\n          aria-controls=\"navbarSupportedContent\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n               Home\r\n            </li>\r\n            {/* <li className=\"nav-item\">\r\n            <NavLink to={\"/about\"} className=\"nav-link\" >\r\n              {props.aboutText}\r\n              </NavLink>\r\n            </li> */}\r\n          </ul>\r\n          <div\r\n            className={`form-check form-switch text-${\r\n              props.mode === \"light\" ? \"dark\" : \"light\"\r\n            }`}\r\n          >\r\n            <input\r\n              className=\"form-check-input\"\r\n              onClick={props.toggleMode}\r\n              type=\"checkbox\"\r\n              id=\"customSwitch1\"\r\n            />\r\n            <label className=\"form-check-label\" htmlFor=\"customSwitch1\">\r\n              Enable Dark Mode\r\n            </label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nNavbar.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  aboutText: PropTypes.string.isRequired,\r\n};\r\n\r\nNavbar.defaultProps = {\r\n  title: \"Set Title here\",\r\n  aboutText: \"Set About text here\",\r\n};\r\n","import React,{useState} from \"react\";\r\n\r\n\r\nexport default function TextForm(props) {\r\n   const handleUpClick = () =>{\r\n    let newText = text.toUpperCase();\r\n    setText(newText);\r\n    props.showAlert(\"Converted to Uppercase\",\"success\");\r\n   }\r\n   const handleLowClick = () =>{\r\n    let newText = text.toLowerCase();\r\n    setText(newText);    \r\n    props.showAlert(\"Converted to Lowercase\",\"success\");\r\n   }\r\n   const handleClrClick = () =>{\r\n    let newText = \"\";\r\n    setText(newText);    \r\n    props.showAlert(\"Text cleared\",\"success\");\r\n   }\r\n   const removeExtraSpaces = () =>{\r\n    let newText = text.replace(/\\s+/g,' ').trim();\r\n    setText(newText);    \r\n    props.showAlert(\"Extra spaces removed\",\"success\");\r\n   }\r\n   const handleCopyTextClick = () =>{\r\n        var copyText = document.getElementById(\"myBox\");\r\n        copyText.select();\r\n        navigator.clipboard.writeText(copyText.value);        \r\n        props.showAlert(\"Text copied successfully\",\"success\");\r\n   }\r\n   const handleOnChange= (event) =>{\r\n    setText(event.target.value)\r\n   } \r\n  const [text,setText]= useState(\"\");\r\n  //setText(\"Set New Text\");\r\n  return (\r\n    <>\r\n    <div className=\"container\"> \r\n      <div className=\"mb-3\" id=\"idTextArea\">\r\n        <label htmlFor=\"myBox\" className=\"form-label\">\r\n          {props.heading}\r\n        </label>\r\n        <textarea\r\n          className=\"form-control\"\r\n          id=\"myBox\"\r\n          rows=\"8\"\r\n          value={text}\r\n          onChange={handleOnChange}\r\n          style={{backgroundColor: props.mode==='dark'?'grey':'light'}}\r\n        ></textarea>\r\n        \r\n      </div>\r\n      <button className=\"btn btn-primary mx-2\" onClick={handleUpClick}>Convert To Upper Case</button>\r\n      <button className=\"btn btn-primary mx-2\" onClick={handleLowClick}>Convert To Lower Case</button>\r\n      <button className=\"btn btn-primary mx-2\" onClick={handleClrClick}>Clear Text</button>\r\n      <button className=\"btn btn-primary mx-2\" onClick={handleCopyTextClick}>Copy Text</button>\r\n      <button className=\"btn btn-primary mx-2\" onClick={removeExtraSpaces}>Remove Extra Spaces</button>\r\n    </div>\r\n    <div className=\"container my-2\">\r\n        <h2>Your text summary</h2>\r\n        <p>{text.split(\"\").length==0?0:text.split(\" \").length} words and {text.length} characters</p>\r\n        <p>{0.008 * text.split(\" \").length} minutes to read</p>\r\n        <h2>Preview</h2>\r\n        <p>{text.length>0?text:\"Enter some text in box to preview\"}</p>\r\n    </div>\r\n    </>\r\n  );\r\n}\r\n","import React,{ useState } from \"react\";\nimport \"./App.css\";\nimport About from \"./components/About\";\nimport Alert from \"./components/Alert\";\nimport Navbar from \"./components/Navbar\";\nimport TextForm from \"./components/TextForm\";\n\nfunction App() {\n  const [mode, setMode] = useState(\"light\");\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type,\n    });\n    setTimeout(() => {\n      setAlert(null);\n    }, 1000);\n  };\n\n  const toggleMode = () => {\n    if (mode === \"light\") {\n      setMode(\"dark\");\n      document.body.style.backgroundColor = \"grey\";\n      showAlert(\"Dark Mode has been enabled\", \"success\");\n      document.title = \"TextUtils - Dark Mode\";\n    } else {\n      setMode(\"light\");\n      document.body.style.backgroundColor = \"white\";\n      showAlert(\"Light Mode has been enabled\", \"success\");\n      document.title = \"TextUtils - Light Mode\";\n    }\n  };\n\n  return (\n    <>\n      <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} />\n      <Alert alert={alert} />\n      <div className=\"container my-3\">\n          <TextForm\n                heading=\"Enter the text to analyze below\"\n                onShowAlert={showAlert}\n              />\n            \n      </div>\n      </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}